BasicGame.Game = function (game) {    //When a State is added to Phaser it automatically has the following properties set on it, even if they already exist:    this.game;		//	a reference to the currently running game    this.add;		//	used to add sprites, text, groups, etc    this.camera;	//	a reference to the game camera    this.cache;		//	the game cache    this.input;		//	the global input manager (you can access this.input.keyboard, this.input.mouse, as well from it)    this.load;		//	for preloading assets    this.math;		//	lots of useful common math operations    this.sound;		//	the sound manager - add a sound, play one, set-up markers, etc    this.stage;		//	the game stage    this.time;		//	the clock    this.tweens;    //  the tween manager    this.state;	    //	the state manager    this.world;		//	the game world    this.particles;	//	the particle manager    this.physics;	//	the physics manager    this.rnd;		//	the repeatable random number generator    this.player;    this.cursors;    this.map;    this.ground_layer;    this.tree_layer;    this.building_layer;};BasicGame.Game.prototype = {    create: function () {        ////  We're going to be using physics, so enable the Arcade Physics system        this.game.physics.startSystem(Phaser.Physics.ARCADE);        //this.map = this.add.tilemap('littleroot');        this.map = this.game.add.tilemap('littleroot');        this.map.addTilesetImage('tiles', 'gameTiles');        this.ground_layer = this.map.createLayer('ground');        this.tree_layer = this.map.createLayer('trees');        this.building_layer = this.map.createLayer('buildings');        //this.map.setCollisionBetween(1, 9962, true, 'trees');        //this.map.setCollisionBetween(1, 9962, true, 'buildings');        this.ground_layer.resizeWorld();        //this.tree_layer.resizeWorld();        //// The player and its settings        this.player = this.game.add.sprite(32, this.game.world.height - 150, 'dude');        //        ////  We need to enable physics on the player        this.game.physics.arcade.enable(this.player);        //this.player.body.collideWorldBounds = true;        ////  Our two animations, walking left and right.        this.player.animations.add('left', [0, 1, 2, 3], 10, true);        this.player.animations.add('right', [5, 6, 7, 8], 10, true);        ////  Our controls.        this.camera.follow(this.player);        this.cursors = this.game.input.keyboard.createCursorKeys();    },    update: function () {        this.game.physics.arcade.collide(this.player, this.tree_layer);        this.game.physics.arcade.collide(this.player, this.building_layer);        //  Reset the players velocity (movement)        this.player.body.velocity.x = 0;        this.player.body.velocity.y = 0;        if (this.cursors.left.isDown)        {            //  Move to the left            this.player.body.velocity.x = -150;            this.player.animations.play('left');        }        else if (this.cursors.right.isDown)        {            //  Move to the right            this.player.body.velocity.x = 150;            this.player.animations.play('right');        }        else if (this.cursors.up.isDown) {            //  Move up            this.player.body.velocity.y = -150;            //this.player.animations.play('up');        }        else if (this.cursors.down.isDown)        {            //  Move down            this.player.body.velocity.y = 150;            //this.player.animations.play('down');        }        else        {            //  Stand still            this.player.animations.stop();            this.player.frame = 4;        }    },    quitGame: function (pointer) {        //	Here you should destroy anything you no longer need.        //	Stop music, delete sprites, purge caches, free resources, all that good stuff.        //	Then let's go back to the main menu.        this.state.start('MainMenu');    },};